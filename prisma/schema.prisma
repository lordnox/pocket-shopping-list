// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// diagram: https://dbdiagram.io/d/63b915cc7d39e42284e974d5

generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// defines an item purchasable in a shop
model Product {
  id            String          @id @default(cuid())
  userId        String
  createdAt     DateTime        @default(now())
  icon          String?
  name          String          @unique()
  type          ItemType        @default(kilogram)
  prices        ProductPrice[]
  createdBy     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags          ProductTag[]
  StockListItem StockListItem[]
}

// contains the price of a shopping item
model ProductPrice {
  id              String   @id @default(cuid())
  userId          String
  itemId          String
  createdAt       DateTime @default(now())
  price           Int
  normalizedPrice Int
  amount          Int      @default(1000)
  sourceId        String?
  source          Source?  @relation(fields: [sourceId], references: [id])
  item            Product  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdBy       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProductTag {
  id    String    @id @default(cuid())
  name  String    @unique
  items Product[]

  @@map("Tag")
}

model StockListItem {
  id          String     @id @default(cuid())
  name        String
  StockList   StockList? @relation(fields: [stockListId], references: [id])
  stockListId String?
  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?
  createdAt   DateTime   @default(now())
}

model StockList {
  id        String          @id @default(cuid())
  name      String
  icon      String?
  products  StockListItem[]
  userId    String
  createdBy User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(user)
  accounts      Account[]
  sessions      Session[]
  items         Product[]
  ProductPrice  ProductPrice[]
  StockList     StockList[]
}

// --- Auth: Necessary for Next auth
model Account {
  id                String       @id @default(cuid())
  userId            String
  type              ProviderType
  provider          String
  providerAccountId String
  refresh_token     String?      @db.Text
  access_token      String?      @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?      @db.Text
  session_state     String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Auth

// --- Source: Where something is from
model Source {
  id            String             @id @default(cuid())
  geoLocationId String?
  GeoLocation   GeoLocationSource? @relation(fields: [geoLocationId], references: [id])
  WebShop       WebShopSource?     @relation(fields: [webShopId], references: [id])
  webShopId     String?
  ProductPrice  ProductPrice[]
  createdAt     DateTime           @default(now())
}

model GeoLocationSource {
  id        String   @id @default(cuid())
  accuracy  Float
  latitude  Float
  longitude Float
  Source    Source[]
  createdAt DateTime @default(now())
}

model WebShopSource {
  id        String   @id @default(cuid())
  url       String
  Source    Source[]
  createdAt DateTime @default(now())
}

// --- Source

// --- Enums

enum ProviderType {
  oidc
  oauth
  email
  credentials
}

enum ItemType {
  kilogram
  liter
  piece
}

enum UserRole {
  admin
  user
}
